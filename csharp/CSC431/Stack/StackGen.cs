// $ANTLR 3.3 Nov 30, 2010 12:50:56 StackGen.g 2011-02-02 16:55:58

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162


   /* <auto-generated> */
   using System.Reflection.Emit;
   using System.Reflection;


using System;
using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;using Stack = System.Collections.Generic.Stack<object>;
using List = System.Collections.IList;
using ArrayList = System.Collections.Generic.List<object>;

namespace CSC431.Stack
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3 Nov 30, 2010 12:50:56")]
[System.CLSCompliant(false)]
public partial class StackGen : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "STRUCT", "INT", "BOOL", "FUN", "VOID", "PRINT", "ENDL", "READ", "IF", "ELSE", "WHILE", "DELETE", "RETURN", "TRUE", "FALSE", "NEW", "NULL", "PROGRAM", "TYPES", "TYPE", "DECLS", "FUNCS", "DECL", "DECLLIST", "PARAMS", "RETTYPE", "BLOCK", "STMTS", "INVOKE", "ARGS", "NEG", "LBRACE", "RBRACE", "SEMI", "COMMA", "LPAREN", "RPAREN", "ASSIGN", "DOT", "AND", "OR", "EQ", "LT", "GT", "NE", "LE", "GE", "PLUS", "MINUS", "TIMES", "DIVIDE", "NOT", "ID", "INTEGER", "WS", "COMMENT"
	};
	public const int EOF=-1;
	public const int STRUCT=4;
	public const int INT=5;
	public const int BOOL=6;
	public const int FUN=7;
	public const int VOID=8;
	public const int PRINT=9;
	public const int ENDL=10;
	public const int READ=11;
	public const int IF=12;
	public const int ELSE=13;
	public const int WHILE=14;
	public const int DELETE=15;
	public const int RETURN=16;
	public const int TRUE=17;
	public const int FALSE=18;
	public const int NEW=19;
	public const int NULL=20;
	public const int PROGRAM=21;
	public const int TYPES=22;
	public const int TYPE=23;
	public const int DECLS=24;
	public const int FUNCS=25;
	public const int DECL=26;
	public const int DECLLIST=27;
	public const int PARAMS=28;
	public const int RETTYPE=29;
	public const int BLOCK=30;
	public const int STMTS=31;
	public const int INVOKE=32;
	public const int ARGS=33;
	public const int NEG=34;
	public const int LBRACE=35;
	public const int RBRACE=36;
	public const int SEMI=37;
	public const int COMMA=38;
	public const int LPAREN=39;
	public const int RPAREN=40;
	public const int ASSIGN=41;
	public const int DOT=42;
	public const int AND=43;
	public const int OR=44;
	public const int EQ=45;
	public const int LT=46;
	public const int GT=47;
	public const int NE=48;
	public const int LE=49;
	public const int GE=50;
	public const int PLUS=51;
	public const int MINUS=52;
	public const int TIMES=53;
	public const int DIVIDE=54;
	public const int NOT=55;
	public const int ID=56;
	public const int INTEGER=57;
	public const int WS=58;
	public const int COMMENT=59;

	// delegates
	// delegators

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public StackGen( ITreeNodeStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public StackGen(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
		

	public override string[] TokenNames { get { return StackGen.tokenNames; } }
	public override string GrammarFileName { get { return "StackGen.g"; } }



 	protected virtual void OnCreated() {}
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}


    protected virtual void Enter_program() {}
    protected virtual void Leave_program() {}

    // $ANTLR start "program"
    // StackGen.g:19:1: program : ^( PROGRAM ( types ds= declarations functions ) ) ;
    [GrammarRule("program")]
    private void program()
    {

        Dictionary<string, Type> ds = default(Dictionary<string, Type>);

    	try { DebugEnterRule(GrammarFileName, "program");
    	DebugLocation(19, 1);
    	try
    	{
    		// StackGen.g:20:2: ( ^( PROGRAM ( types ds= declarations functions ) ) )
    		DebugEnterAlt(1);
    		// StackGen.g:20:4: ^( PROGRAM ( types ds= declarations functions ) )
    		{
    		DebugLocation(20, 4);
    		DebugLocation(20, 6);
    		Match(input,PROGRAM,Follow._PROGRAM_in_program55); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(20, 14);
    		// StackGen.g:20:14: ( types ds= declarations functions )
    		DebugEnterAlt(1);
    		// StackGen.g:20:15: types ds= declarations functions
    		{
    		DebugLocation(20, 15);
    		PushFollow(Follow._types_in_program58);
    		types();
    		PopFollow();

    		DebugLocation(20, 23);
    		PushFollow(Follow._declarations_in_program62);
    		ds=declarations();
    		PopFollow();

    		DebugLocation(20, 37);
    		setGlobals(ds);
    		DebugLocation(20, 55);
    		PushFollow(Follow._functions_in_program66);
    		functions();
    		PopFollow();


    		}


    		Match(input, TokenTypes.Up, null); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(21, 1);
    	} finally { DebugExitRule(GrammarFileName, "program"); }
    	return;

    }
    // $ANTLR end "program"


    protected virtual void Enter_types() {}
    protected virtual void Leave_types() {}

    // $ANTLR start "types"
    // StackGen.g:23:1: types : ( ^( TYPES types_sub ) | TYPES );
    [GrammarRule("types")]
    private void types()
    {

    	try { DebugEnterRule(GrammarFileName, "types");
    	DebugLocation(23, 3);
    	try
    	{
    		// StackGen.g:24:4: ( ^( TYPES types_sub ) | TYPES )
    		int alt1=2;
    		try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    		int LA1_0 = input.LA(1);

    		if ((LA1_0==TYPES))
    		{
    			int LA1_1 = input.LA(2);

    			if ((LA1_1==DOWN))
    			{
    				alt1=1;
    			}
    			else if (((LA1_1>=DECLS && LA1_1<=FUNCS)))
    			{
    				alt1=2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 1, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(1); }
    		switch (alt1)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:24:7: ^( TYPES types_sub )
    			{
    			DebugLocation(24, 7);
    			DebugLocation(24, 9);
    			Match(input,TYPES,Follow._TYPES_in_types84); 

    			if (input.LA(1) == TokenTypes.Down)
    			{
    				Match(input, TokenTypes.Down, null); 
    				DebugLocation(24, 15);
    				PushFollow(Follow._types_sub_in_types86);
    				types_sub();
    				PopFollow();


    				Match(input, TokenTypes.Up, null); 
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:25:7: TYPES
    			{
    			DebugLocation(25, 7);
    			Match(input,TYPES,Follow._TYPES_in_types95); 

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(26, 3);
    	} finally { DebugExitRule(GrammarFileName, "types"); }
    	return;

    }
    // $ANTLR end "types"


    protected virtual void Enter_type_declaration() {}
    protected virtual void Leave_type_declaration() {}

    // $ANTLR start "type_declaration"
    // StackGen.g:28:1: type_declaration : ^( STRUCT (id= ID ) nested_decl[tb] ) ;
    [GrammarRule("type_declaration")]
    private void type_declaration()
    {

        CommonTree id=null;

        TypeBuilder tb;
    	try { DebugEnterRule(GrammarFileName, "type_declaration");
    	DebugLocation(28, 3);
    	try
    	{
    		// StackGen.g:30:4: ( ^( STRUCT (id= ID ) nested_decl[tb] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:30:7: ^( STRUCT (id= ID ) nested_decl[tb] )
    		{
    		DebugLocation(30, 7);
    		DebugLocation(30, 9);
    		Match(input,STRUCT,Follow._STRUCT_in_type_declaration117); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(30, 16);
    		// StackGen.g:30:16: (id= ID )
    		DebugEnterAlt(1);
    		// StackGen.g:30:17: id= ID
    		{
    		DebugLocation(30, 19);
    		id=(CommonTree)Match(input,ID,Follow._ID_in_type_declaration122); 

    		}

    		DebugLocation(30, 24);
    		tb = programModule.DefineType((id!=null?id.Text:null), TypeAttributes.Public); tb.DefineDefaultConstructor(MethodAttributes.Public); typeMap[(id!=null?id.Text:null)] = tb;
    		DebugLocation(31, 10);
    		PushFollow(Follow._nested_decl_in_type_declaration136);
    		nested_decl(tb);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(31, 27);
    		 tb.CreateType(); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(32, 3);
    	} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
    	return;

    }
    // $ANTLR end "type_declaration"


    protected virtual void Enter_nested_decl() {}
    protected virtual void Leave_nested_decl() {}

    // $ANTLR start "nested_decl"
    // StackGen.g:34:1: nested_decl[TypeBuilder tb] : ( field_decl[$tb] )+ ;
    [GrammarRule("nested_decl")]
    private void nested_decl(TypeBuilder tb)
    {

    	try { DebugEnterRule(GrammarFileName, "nested_decl");
    	DebugLocation(34, 3);
    	try
    	{
    		// StackGen.g:35:4: ( ( field_decl[$tb] )+ )
    		DebugEnterAlt(1);
    		// StackGen.g:35:7: ( field_decl[$tb] )+
    		{
    		DebugLocation(35, 7);
    		// StackGen.g:35:7: ( field_decl[$tb] )+
    		int cnt2=0;
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if ((LA2_0==DECL))
    			{
    				alt2=1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch (alt2)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// StackGen.g:35:8: field_decl[$tb]
    				{
    				DebugLocation(35, 8);
    				PushFollow(Follow._field_decl_in_nested_decl159);
    				field_decl(tb);
    				PopFollow();


    				}
    				break;

    			default:
    				if (cnt2 >= 1)
    					goto loop2;

    				EarlyExitException eee2 = new EarlyExitException( 2, input );
    				DebugRecognitionException(eee2);
    				throw eee2;
    			}
    			cnt2++;
    		}
    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }


    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(36, 3);
    	} finally { DebugExitRule(GrammarFileName, "nested_decl"); }
    	return;

    }
    // $ANTLR end "nested_decl"


    protected virtual void Enter_types_sub() {}
    protected virtual void Leave_types_sub() {}

    // $ANTLR start "types_sub"
    // StackGen.g:38:1: types_sub : ( ( type_declaration types_sub ) | );
    [GrammarRule("types_sub")]
    private void types_sub()
    {

    	try { DebugEnterRule(GrammarFileName, "types_sub");
    	DebugLocation(38, 3);
    	try
    	{
    		// StackGen.g:39:4: ( ( type_declaration types_sub ) | )
    		int alt3=2;
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		int LA3_0 = input.LA(1);

    		if ((LA3_0==STRUCT))
    		{
    			alt3=1;
    		}
    		else if ((LA3_0==UP))
    		{
    			alt3=2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 3, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:39:7: ( type_declaration types_sub )
    			{
    			DebugLocation(39, 7);
    			// StackGen.g:39:7: ( type_declaration types_sub )
    			DebugEnterAlt(1);
    			// StackGen.g:39:8: type_declaration types_sub
    			{
    			DebugLocation(39, 8);
    			PushFollow(Follow._type_declaration_in_types_sub179);
    			type_declaration();
    			PopFollow();

    			DebugLocation(39, 25);
    			PushFollow(Follow._types_sub_in_types_sub181);
    			types_sub();
    			PopFollow();


    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:41:4: 
    			{
    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(41, 3);
    	} finally { DebugExitRule(GrammarFileName, "types_sub"); }
    	return;

    }
    // $ANTLR end "types_sub"


    protected virtual void Enter_field_decl() {}
    protected virtual void Leave_field_decl() {}

    // $ANTLR start "field_decl"
    // StackGen.g:43:1: field_decl[TypeBuilder tb] : ^( DECL ^( TYPE t= type ) id= ID ) ;
    [GrammarRule("field_decl")]
    private void field_decl(TypeBuilder tb)
    {

        CommonTree id=null;
        Type t = default(Type);

    	try { DebugEnterRule(GrammarFileName, "field_decl");
    	DebugLocation(43, 3);
    	try
    	{
    		// StackGen.g:44:4: ( ^( DECL ^( TYPE t= type ) id= ID ) )
    		DebugEnterAlt(1);
    		// StackGen.g:44:7: ^( DECL ^( TYPE t= type ) id= ID )
    		{
    		DebugLocation(44, 7);
    		DebugLocation(44, 9);
    		Match(input,DECL,Follow._DECL_in_field_decl207); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(44, 14);
    		DebugLocation(44, 16);
    		Match(input,TYPE,Follow._TYPE_in_field_decl210); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(44, 22);
    		PushFollow(Follow._type_in_field_decl214);
    		t=type();
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(44, 31);
    		id=(CommonTree)Match(input,ID,Follow._ID_in_field_decl219); 

    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(44, 36);
    		tb.DefineField((id!=null?id.Text:null), t, FieldAttributes.Public);

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(45, 3);
    	} finally { DebugExitRule(GrammarFileName, "field_decl"); }
    	return;

    }
    // $ANTLR end "field_decl"


    protected virtual void Enter_type() {}
    protected virtual void Leave_type() {}

    // $ANTLR start "type"
    // StackGen.g:47:1: type returns [Type t = null] : ( INT | BOOL | ^( STRUCT id= ID ) );
    [GrammarRule("type")]
    private Type type()
    {

        Type t =  null;

        CommonTree id=null;

    	try { DebugEnterRule(GrammarFileName, "type");
    	DebugLocation(47, 0);
    	try
    	{
    		// StackGen.g:48:2: ( INT | BOOL | ^( STRUCT id= ID ) )
    		int alt4=3;
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		switch (input.LA(1))
    		{
    		case INT:
    			{
    			alt4=1;
    			}
    			break;
    		case BOOL:
    			{
    			alt4=2;
    			}
    			break;
    		case STRUCT:
    			{
    			alt4=3;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:48:4: INT
    			{
    			DebugLocation(48, 4);
    			Match(input,INT,Follow._INT_in_type239); 
    			DebugLocation(48, 8);
    			t = typeof(int);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:49:4: BOOL
    			{
    			DebugLocation(49, 4);
    			Match(input,BOOL,Follow._BOOL_in_type246); 
    			DebugLocation(49, 9);
    			t = typeof(bool);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// StackGen.g:50:4: ^( STRUCT id= ID )
    			{
    			DebugLocation(50, 4);
    			DebugLocation(50, 6);
    			Match(input,STRUCT,Follow._STRUCT_in_type254); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(50, 15);
    			id=(CommonTree)Match(input,ID,Follow._ID_in_type258); 

    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(50, 20);
    			t = typeMap[(id!=null?id.Text:null)];

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(51, 0);
    	} finally { DebugExitRule(GrammarFileName, "type"); }
    	return t;

    }
    // $ANTLR end "type"


    protected virtual void Enter_declarations() {}
    protected virtual void Leave_declarations() {}

    // $ANTLR start "declarations"
    // StackGen.g:53:1: declarations returns [Dictionary<string, Type> r = new Dictionary<string, Type>()] : ( ^( DECLS declaration[$r] ) | );
    [GrammarRule("declarations")]
    private Dictionary<string, Type> declarations()
    {

        Dictionary<string, Type> r =  new Dictionary<string, Type>();

    	try { DebugEnterRule(GrammarFileName, "declarations");
    	DebugLocation(53, 0);
    	try
    	{
    		// StackGen.g:54:2: ( ^( DECLS declaration[$r] ) | )
    		int alt5=2;
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_0 = input.LA(1);

    		if ((LA5_0==DECLS))
    		{
    			alt5=1;
    		}
    		else if ((LA5_0==FUNCS||LA5_0==STMTS))
    		{
    			alt5=2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 5, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:54:4: ^( DECLS declaration[$r] )
    			{
    			DebugLocation(54, 4);
    			DebugLocation(54, 6);
    			Match(input,DECLS,Follow._DECLS_in_declarations276); 

    			if (input.LA(1) == TokenTypes.Down)
    			{
    				Match(input, TokenTypes.Down, null); 
    				DebugLocation(54, 12);
    				PushFollow(Follow._declaration_in_declarations278);
    				declaration(r);
    				PopFollow();


    				Match(input, TokenTypes.Up, null); 
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:56:1: 
    			{
    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(56, 0);
    	} finally { DebugExitRule(GrammarFileName, "declarations"); }
    	return r;

    }
    // $ANTLR end "declarations"


    protected virtual void Enter_declaration() {}
    protected virtual void Leave_declaration() {}

    // $ANTLR start "declaration"
    // StackGen.g:58:1: declaration[Dictionary<string, Type> r] : ( decl_list[$r] )* ;
    [GrammarRule("declaration")]
    private void declaration(Dictionary<string, Type> r)
    {

    	try { DebugEnterRule(GrammarFileName, "declaration");
    	DebugLocation(58, 0);
    	try
    	{
    		// StackGen.g:59:2: ( ( decl_list[$r] )* )
    		DebugEnterAlt(1);
    		// StackGen.g:59:4: ( decl_list[$r] )*
    		{
    		DebugLocation(59, 4);
    		// StackGen.g:59:4: ( decl_list[$r] )*
    		try { DebugEnterSubRule(6);
    		while (true)
    		{
    			int alt6=2;
    			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    			int LA6_0 = input.LA(1);

    			if ((LA6_0==DECLLIST))
    			{
    				alt6=1;
    			}


    			} finally { DebugExitDecision(6); }
    			switch ( alt6 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// StackGen.g:59:5: decl_list[$r]
    				{
    				DebugLocation(59, 5);
    				PushFollow(Follow._decl_list_in_declaration297);
    				decl_list(r);
    				PopFollow();


    				}
    				break;

    			default:
    				goto loop6;
    			}
    		}

    		loop6:
    			;

    		} finally { DebugExitSubRule(6); }


    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(60, 0);
    	} finally { DebugExitRule(GrammarFileName, "declaration"); }
    	return;

    }
    // $ANTLR end "declaration"


    protected virtual void Enter_decl_list() {}
    protected virtual void Leave_decl_list() {}

    // $ANTLR start "decl_list"
    // StackGen.g:62:1: decl_list[Dictionary<string, Type> r] : ^( DECLLIST ^( TYPE t= type ) id_list[t, $r] ) ;
    [GrammarRule("decl_list")]
    private void decl_list(Dictionary<string, Type> r)
    {

        Type t = default(Type);

    	try { DebugEnterRule(GrammarFileName, "decl_list");
    	DebugLocation(62, 0);
    	try
    	{
    		// StackGen.g:63:2: ( ^( DECLLIST ^( TYPE t= type ) id_list[t, $r] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:63:4: ^( DECLLIST ^( TYPE t= type ) id_list[t, $r] )
    		{
    		DebugLocation(63, 4);
    		DebugLocation(63, 6);
    		Match(input,DECLLIST,Follow._DECLLIST_in_decl_list313); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(63, 15);
    		DebugLocation(63, 17);
    		Match(input,TYPE,Follow._TYPE_in_decl_list316); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(63, 23);
    		PushFollow(Follow._type_in_decl_list320);
    		t=type();
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(63, 30);
    		PushFollow(Follow._id_list_in_decl_list323);
    		id_list(t, r);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(64, 0);
    	} finally { DebugExitRule(GrammarFileName, "decl_list"); }
    	return;

    }
    // $ANTLR end "decl_list"


    protected virtual void Enter_id_list() {}
    protected virtual void Leave_id_list() {}

    // $ANTLR start "id_list"
    // StackGen.g:66:1: id_list[Type t, Dictionary<string, Type> r] : (id= ID )+ ;
    [GrammarRule("id_list")]
    private void id_list(Type t, Dictionary<string, Type> r)
    {

        CommonTree id=null;

    	try { DebugEnterRule(GrammarFileName, "id_list");
    	DebugLocation(66, 0);
    	try
    	{
    		// StackGen.g:67:2: ( (id= ID )+ )
    		DebugEnterAlt(1);
    		// StackGen.g:67:4: (id= ID )+
    		{
    		DebugLocation(67, 4);
    		// StackGen.g:67:4: (id= ID )+
    		int cnt7=0;
    		try { DebugEnterSubRule(7);
    		while (true)
    		{
    			int alt7=2;
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if ((LA7_0==ID))
    			{
    				alt7=1;
    			}


    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// StackGen.g:67:5: id= ID
    				{
    				DebugLocation(67, 7);
    				id=(CommonTree)Match(input,ID,Follow._ID_in_id_list340); 
    				DebugLocation(67, 11);
    				r[(id!=null?id.Text:null)] = t;

    				}
    				break;

    			default:
    				if (cnt7 >= 1)
    					goto loop7;

    				EarlyExitException eee7 = new EarlyExitException( 7, input );
    				DebugRecognitionException(eee7);
    				throw eee7;
    			}
    			cnt7++;
    		}
    		loop7:
    			;

    		} finally { DebugExitSubRule(7); }


    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(68, 0);
    	} finally { DebugExitRule(GrammarFileName, "id_list"); }
    	return;

    }
    // $ANTLR end "id_list"


    protected virtual void Enter_functions() {}
    protected virtual void Leave_functions() {}

    // $ANTLR start "functions"
    // StackGen.g:70:1: functions : ^( FUNCS ( function )* ) ;
    [GrammarRule("functions")]
    private void functions()
    {

    	try { DebugEnterRule(GrammarFileName, "functions");
    	DebugLocation(70, 1);
    	try
    	{
    		// StackGen.g:71:2: ( ^( FUNCS ( function )* ) )
    		DebugEnterAlt(1);
    		// StackGen.g:71:4: ^( FUNCS ( function )* )
    		{
    		DebugLocation(71, 4);
    		DebugLocation(71, 6);
    		Match(input,FUNCS,Follow._FUNCS_in_functions356); 

    		if (input.LA(1) == TokenTypes.Down)
    		{
    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(71, 12);
    			// StackGen.g:71:12: ( function )*
    			try { DebugEnterSubRule(8);
    			while (true)
    			{
    				int alt8=2;
    				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    				int LA8_0 = input.LA(1);

    				if ((LA8_0==FUN))
    				{
    					alt8=1;
    				}


    				} finally { DebugExitDecision(8); }
    				switch ( alt8 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// StackGen.g:71:12: function
    					{
    					DebugLocation(71, 12);
    					PushFollow(Follow._function_in_functions358);
    					function();
    					PopFollow();


    					}
    					break;

    				default:
    					goto loop8;
    				}
    			}

    			loop8:
    				;

    			} finally { DebugExitSubRule(8); }


    			Match(input, TokenTypes.Up, null); 
    		}

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(72, 1);
    	} finally { DebugExitRule(GrammarFileName, "functions"); }
    	return;

    }
    // $ANTLR end "functions"


    protected virtual void Enter_function() {}
    protected virtual void Leave_function() {}

    // $ANTLR start "function"
    // StackGen.g:74:1: function : ^( FUN id= ID ps= parameters ^( RETTYPE r= return_type ) ds= declarations statement_list[ilg] ) ;
    [GrammarRule("function")]
    private void function()
    {

        CommonTree id=null;
        List<Tuple<string, Type>> ps = default(List<Tuple<string, Type>>);
        Type r = default(Type);
        Dictionary<string, Type> ds = default(Dictionary<string, Type>);


        	locals.Clear();
        	
        	MethodBuilder mb;
        	ILGenerator ilg = null;
        	var decs = new Dictionary<string, Type>();

    	try { DebugEnterRule(GrammarFileName, "function");
    	DebugLocation(74, 1);
    	try
    	{
    		// StackGen.g:83:2: ( ^( FUN id= ID ps= parameters ^( RETTYPE r= return_type ) ds= declarations statement_list[ilg] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:83:4: ^( FUN id= ID ps= parameters ^( RETTYPE r= return_type ) ds= declarations statement_list[ilg] )
    		{
    		DebugLocation(83, 4);
    		DebugLocation(83, 6);
    		Match(input,FUN,Follow._FUN_in_function377); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(83, 12);
    		id=(CommonTree)Match(input,ID,Follow._ID_in_function381); 
    		DebugLocation(83, 18);
    		PushFollow(Follow._parameters_in_function385);
    		ps=parameters();
    		PopFollow();

    		DebugLocation(83, 30);
    		DebugLocation(83, 32);
    		Match(input,RETTYPE,Follow._RETTYPE_in_function388); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(83, 41);
    		PushFollow(Follow._return_type_in_function392);
    		r=return_type();
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(83, 55);
    		mb = defineFunction((id!=null?id.Text:null), r, ps); ilg = mb.GetILGenerator(); 
    		DebugLocation(84, 5);
    		PushFollow(Follow._declarations_in_function401);
    		ds=declarations();
    		PopFollow();

    		DebugLocation(84, 19);
    		setLocals(ds, ilg);
    		DebugLocation(85, 3);
    		PushFollow(Follow._statement_list_in_function407);
    		statement_list(ilg);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(86, 4);

    						if (r != typeof(void))
    							ilg.Emit(OpCodes.Ldc_I4_0);
    						ilg.Emit(OpCodes.Ret);
    					

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(91, 1);
    	} finally { DebugExitRule(GrammarFileName, "function"); }
    	return;

    }
    // $ANTLR end "function"


    protected virtual void Enter_parameters() {}
    protected virtual void Leave_parameters() {}

    // $ANTLR start "parameters"
    // StackGen.g:93:1: parameters returns [List<Tuple<string, Type>> ps = new List<Tuple<string, Type>>()] : ^( PARAMS ( param_decl[$ps] )* ) ;
    [GrammarRule("parameters")]
    private List<Tuple<string, Type>> parameters()
    {

        List<Tuple<string, Type>> ps =  new List<Tuple<string, Type>>();

    	try { DebugEnterRule(GrammarFileName, "parameters");
    	DebugLocation(93, 1);
    	try
    	{
    		// StackGen.g:94:2: ( ^( PARAMS ( param_decl[$ps] )* ) )
    		DebugEnterAlt(1);
    		// StackGen.g:94:4: ^( PARAMS ( param_decl[$ps] )* )
    		{
    		DebugLocation(94, 4);
    		DebugLocation(94, 6);
    		Match(input,PARAMS,Follow._PARAMS_in_parameters430); 

    		if (input.LA(1) == TokenTypes.Down)
    		{
    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(94, 13);
    			// StackGen.g:94:13: ( param_decl[$ps] )*
    			try { DebugEnterSubRule(9);
    			while (true)
    			{
    				int alt9=2;
    				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    				int LA9_0 = input.LA(1);

    				if ((LA9_0==DECL))
    				{
    					alt9=1;
    				}


    				} finally { DebugExitDecision(9); }
    				switch ( alt9 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// StackGen.g:94:13: param_decl[$ps]
    					{
    					DebugLocation(94, 13);
    					PushFollow(Follow._param_decl_in_parameters432);
    					param_decl(ps);
    					PopFollow();


    					}
    					break;

    				default:
    					goto loop9;
    				}
    			}

    			loop9:
    				;

    			} finally { DebugExitSubRule(9); }


    			Match(input, TokenTypes.Up, null); 
    		}

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(95, 1);
    	} finally { DebugExitRule(GrammarFileName, "parameters"); }
    	return ps;

    }
    // $ANTLR end "parameters"


    protected virtual void Enter_param_decl() {}
    protected virtual void Leave_param_decl() {}

    // $ANTLR start "param_decl"
    // StackGen.g:97:1: param_decl[List<Tuple<string, Type>> ps] : ^( DECL ^( TYPE t= type ) id= ID ) ;
    [GrammarRule("param_decl")]
    private void param_decl(List<Tuple<string, Type>> ps)
    {

        CommonTree id=null;
        Type t = default(Type);

    	try { DebugEnterRule(GrammarFileName, "param_decl");
    	DebugLocation(97, 3);
    	try
    	{
    		// StackGen.g:98:4: ( ^( DECL ^( TYPE t= type ) id= ID ) )
    		DebugEnterAlt(1);
    		// StackGen.g:98:7: ^( DECL ^( TYPE t= type ) id= ID )
    		{
    		DebugLocation(98, 7);
    		DebugLocation(98, 9);
    		Match(input,DECL,Follow._DECL_in_param_decl453); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(98, 14);
    		DebugLocation(98, 16);
    		Match(input,TYPE,Follow._TYPE_in_param_decl456); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(98, 22);
    		PushFollow(Follow._type_in_param_decl460);
    		t=type();
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(98, 31);
    		id=(CommonTree)Match(input,ID,Follow._ID_in_param_decl465); 

    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(98, 36);
    		ps.Add(new Tuple<string, Type>((id!=null?id.Text:null), t));

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(99, 3);
    	} finally { DebugExitRule(GrammarFileName, "param_decl"); }
    	return;

    }
    // $ANTLR end "param_decl"


    protected virtual void Enter_return_type() {}
    protected virtual void Leave_return_type() {}

    // $ANTLR start "return_type"
    // StackGen.g:101:1: return_type returns [Type ret = null] : (t= type | VOID );
    [GrammarRule("return_type")]
    private Type return_type()
    {

        Type ret =  null;

        Type t = default(Type);

    	try { DebugEnterRule(GrammarFileName, "return_type");
    	DebugLocation(101, 1);
    	try
    	{
    		// StackGen.g:102:2: (t= type | VOID )
    		int alt10=2;
    		try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    		int LA10_0 = input.LA(1);

    		if (((LA10_0>=STRUCT && LA10_0<=BOOL)))
    		{
    			alt10=1;
    		}
    		else if ((LA10_0==VOID))
    		{
    			alt10=2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 10, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(10); }
    		switch (alt10)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:102:4: t= type
    			{
    			DebugLocation(102, 5);
    			PushFollow(Follow._type_in_return_type487);
    			t=type();
    			PopFollow();

    			DebugLocation(102, 11);
    			ret = t;

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:103:4: VOID
    			{
    			DebugLocation(103, 4);
    			Match(input,VOID,Follow._VOID_in_return_type494); 
    			DebugLocation(103, 9);
    			ret = typeof(void);

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(104, 1);
    	} finally { DebugExitRule(GrammarFileName, "return_type"); }
    	return ret;

    }
    // $ANTLR end "return_type"


    protected virtual void Enter_statement() {}
    protected virtual void Leave_statement() {}

    // $ANTLR start "statement"
    // StackGen.g:106:1: statement[ILGenerator ilg] : ( block[$ilg] | assignment[$ilg] | print[$ilg] | read[$ilg] | conditional[$ilg] | loop[$ilg] | delete[$ilg] | ret[$ilg] | invocation[$ilg] );
    [GrammarRule("statement")]
    private void statement(ILGenerator ilg)
    {

    	try { DebugEnterRule(GrammarFileName, "statement");
    	DebugLocation(106, 1);
    	try
    	{
    		// StackGen.g:107:2: ( block[$ilg] | assignment[$ilg] | print[$ilg] | read[$ilg] | conditional[$ilg] | loop[$ilg] | delete[$ilg] | ret[$ilg] | invocation[$ilg] )
    		int alt11=9;
    		try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    		switch (input.LA(1))
    		{
    		case BLOCK:
    			{
    			alt11=1;
    			}
    			break;
    		case ASSIGN:
    			{
    			alt11=2;
    			}
    			break;
    		case PRINT:
    			{
    			alt11=3;
    			}
    			break;
    		case READ:
    			{
    			alt11=4;
    			}
    			break;
    		case IF:
    			{
    			alt11=5;
    			}
    			break;
    		case WHILE:
    			{
    			alt11=6;
    			}
    			break;
    		case DELETE:
    			{
    			alt11=7;
    			}
    			break;
    		case RETURN:
    			{
    			alt11=8;
    			}
    			break;
    		case INVOKE:
    			{
    			alt11=9;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 11, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(11); }
    		switch (alt11)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:107:4: block[$ilg]
    			{
    			DebugLocation(107, 4);
    			PushFollow(Follow._block_in_statement509);
    			block(ilg);
    			PopFollow();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:108:4: assignment[$ilg]
    			{
    			DebugLocation(108, 4);
    			PushFollow(Follow._assignment_in_statement515);
    			assignment(ilg);
    			PopFollow();


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// StackGen.g:109:4: print[$ilg]
    			{
    			DebugLocation(109, 4);
    			PushFollow(Follow._print_in_statement521);
    			print(ilg);
    			PopFollow();


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// StackGen.g:110:4: read[$ilg]
    			{
    			DebugLocation(110, 4);
    			PushFollow(Follow._read_in_statement527);
    			read(ilg);
    			PopFollow();


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// StackGen.g:111:4: conditional[$ilg]
    			{
    			DebugLocation(111, 4);
    			PushFollow(Follow._conditional_in_statement533);
    			conditional(ilg);
    			PopFollow();


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// StackGen.g:112:4: loop[$ilg]
    			{
    			DebugLocation(112, 4);
    			PushFollow(Follow._loop_in_statement539);
    			loop(ilg);
    			PopFollow();


    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// StackGen.g:113:4: delete[$ilg]
    			{
    			DebugLocation(113, 4);
    			PushFollow(Follow._delete_in_statement545);
    			delete(ilg);
    			PopFollow();


    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// StackGen.g:114:4: ret[$ilg]
    			{
    			DebugLocation(114, 4);
    			PushFollow(Follow._ret_in_statement551);
    			ret(ilg);
    			PopFollow();


    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// StackGen.g:115:4: invocation[$ilg]
    			{
    			DebugLocation(115, 4);
    			PushFollow(Follow._invocation_in_statement557);
    			invocation(ilg);
    			PopFollow();


    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(116, 1);
    	} finally { DebugExitRule(GrammarFileName, "statement"); }
    	return;

    }
    // $ANTLR end "statement"


    protected virtual void Enter_block() {}
    protected virtual void Leave_block() {}

    // $ANTLR start "block"
    // StackGen.g:118:1: block[ILGenerator ilg] : ^( BLOCK statement_list[$ilg] ) ;
    [GrammarRule("block")]
    private void block(ILGenerator ilg)
    {

    	try { DebugEnterRule(GrammarFileName, "block");
    	DebugLocation(118, 1);
    	try
    	{
    		// StackGen.g:119:2: ( ^( BLOCK statement_list[$ilg] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:119:4: ^( BLOCK statement_list[$ilg] )
    		{
    		DebugLocation(119, 4);
    		DebugLocation(119, 6);
    		Match(input,BLOCK,Follow._BLOCK_in_block572); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(119, 12);
    		PushFollow(Follow._statement_list_in_block574);
    		statement_list(ilg);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(120, 1);
    	} finally { DebugExitRule(GrammarFileName, "block"); }
    	return;

    }
    // $ANTLR end "block"


    protected virtual void Enter_statement_list() {}
    protected virtual void Leave_statement_list() {}

    // $ANTLR start "statement_list"
    // StackGen.g:122:1: statement_list[ILGenerator ilg] : ^( STMTS ( statement[$ilg] )* ) ;
    [GrammarRule("statement_list")]
    private void statement_list(ILGenerator ilg)
    {

    	try { DebugEnterRule(GrammarFileName, "statement_list");
    	DebugLocation(122, 1);
    	try
    	{
    		// StackGen.g:123:2: ( ^( STMTS ( statement[$ilg] )* ) )
    		DebugEnterAlt(1);
    		// StackGen.g:123:4: ^( STMTS ( statement[$ilg] )* )
    		{
    		DebugLocation(123, 4);
    		DebugLocation(123, 6);
    		Match(input,STMTS,Follow._STMTS_in_statement_list590); 

    		if (input.LA(1) == TokenTypes.Down)
    		{
    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(123, 12);
    			// StackGen.g:123:12: ( statement[$ilg] )*
    			try { DebugEnterSubRule(12);
    			while (true)
    			{
    				int alt12=2;
    				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    				int LA12_0 = input.LA(1);

    				if ((LA12_0==PRINT||(LA12_0>=READ && LA12_0<=IF)||(LA12_0>=WHILE && LA12_0<=RETURN)||LA12_0==BLOCK||LA12_0==INVOKE||LA12_0==ASSIGN))
    				{
    					alt12=1;
    				}


    				} finally { DebugExitDecision(12); }
    				switch ( alt12 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// StackGen.g:123:13: statement[$ilg]
    					{
    					DebugLocation(123, 13);
    					PushFollow(Follow._statement_in_statement_list593);
    					statement(ilg);
    					PopFollow();


    					}
    					break;

    				default:
    					goto loop12;
    				}
    			}

    			loop12:
    				;

    			} finally { DebugExitSubRule(12); }


    			Match(input, TokenTypes.Up, null); 
    		}

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(125, 1);
    	} finally { DebugExitRule(GrammarFileName, "statement_list"); }
    	return;

    }
    // $ANTLR end "statement_list"


    protected virtual void Enter_assignment() {}
    protected virtual void Leave_assignment() {}

    // $ANTLR start "assignment"
    // StackGen.g:127:1: assignment[ILGenerator ilg] : ^( ASSIGN vb= lvalue[$ilg] expression[$ilg] ) ;
    [GrammarRule("assignment")]
    private void assignment(ILGenerator ilg)
    {

        VarBase vb = default(VarBase);

    	try { DebugEnterRule(GrammarFileName, "assignment");
    	DebugLocation(127, 1);
    	try
    	{
    		// StackGen.g:128:2: ( ^( ASSIGN vb= lvalue[$ilg] expression[$ilg] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:128:4: ^( ASSIGN vb= lvalue[$ilg] expression[$ilg] )
    		{
    		DebugLocation(128, 4);
    		DebugLocation(128, 6);
    		Match(input,ASSIGN,Follow._ASSIGN_in_assignment613); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(128, 15);
    		PushFollow(Follow._lvalue_in_assignment617);
    		vb=lvalue(ilg);
    		PopFollow();

    		DebugLocation(128, 29);
    		PushFollow(Follow._expression_in_assignment620);
    		expression(ilg);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(128, 47);
    		 vb.Store(ilg); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(135, 1);
    	} finally { DebugExitRule(GrammarFileName, "assignment"); }
    	return;

    }
    // $ANTLR end "assignment"


    protected virtual void Enter_print() {}
    protected virtual void Leave_print() {}

    // $ANTLR start "print"
    // StackGen.g:137:1: print[ILGenerator ilg] : ^( PRINT expression[$ilg] (el= ENDL )? ) ;
    [GrammarRule("print")]
    private void print(ILGenerator ilg)
    {

        CommonTree el=null;

    	try { DebugEnterRule(GrammarFileName, "print");
    	DebugLocation(137, 1);
    	try
    	{
    		// StackGen.g:138:2: ( ^( PRINT expression[$ilg] (el= ENDL )? ) )
    		DebugEnterAlt(1);
    		// StackGen.g:138:4: ^( PRINT expression[$ilg] (el= ENDL )? )
    		{
    		DebugLocation(138, 4);
    		DebugLocation(138, 6);
    		Match(input,PRINT,Follow._PRINT_in_print642); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(138, 12);
    		PushFollow(Follow._expression_in_print644);
    		expression(ilg);
    		PopFollow();

    		DebugLocation(138, 29);
    		// StackGen.g:138:29: (el= ENDL )?
    		int alt13=2;
    		try { DebugEnterSubRule(13);
    		try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    		int LA13_0 = input.LA(1);

    		if ((LA13_0==ENDL))
    		{
    			alt13=1;
    		}
    		} finally { DebugExitDecision(13); }
    		switch (alt13)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:138:30: el= ENDL
    			{
    			DebugLocation(138, 32);
    			el=(CommonTree)Match(input,ENDL,Follow._ENDL_in_print650); 

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(13); }


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(139, 3);

    					if (el == null)
    					{
    						ilg.Emit(OpCodes.Call, mWrite);
    						ilg.Emit(OpCodes.Ldc_I4_S, (byte)0x20); /*space*/
    						ilg.Emit(OpCodes.Call, mWriteChar);
    					}
    					else
    						ilg.Emit(OpCodes.Call, mWriteLine);
    				

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(149, 1);
    	} finally { DebugExitRule(GrammarFileName, "print"); }
    	return;

    }
    // $ANTLR end "print"


    protected virtual void Enter_read() {}
    protected virtual void Leave_read() {}

    // $ANTLR start "read"
    // StackGen.g:151:1: read[ILGenerator ilg] : ^( READ lv= lvalue[$ilg] ) ;
    [GrammarRule("read")]
    private void read(ILGenerator ilg)
    {

        VarBase lv = default(VarBase);

    	try { DebugEnterRule(GrammarFileName, "read");
    	DebugLocation(151, 1);
    	try
    	{
    		// StackGen.g:152:2: ( ^( READ lv= lvalue[$ilg] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:152:4: ^( READ lv= lvalue[$ilg] )
    		{
    		DebugLocation(152, 4);
    		DebugLocation(152, 6);
    		Match(input,READ,Follow._READ_in_read671); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(152, 13);
    		PushFollow(Follow._lvalue_in_read675);
    		lv=lvalue(ilg);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(152, 28);
    		 ilg.Emit(OpCodes.Call, functionMap[ReadInIntName]); lv.Store(ilg); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(153, 1);
    	} finally { DebugExitRule(GrammarFileName, "read"); }
    	return;

    }
    // $ANTLR end "read"


    protected virtual void Enter_conditional() {}
    protected virtual void Leave_conditional() {}

    // $ANTLR start "conditional"
    // StackGen.g:155:1: conditional[ILGenerator ilg] : ^( IF expression[$ilg] t= block[$ilg] (f= block[$ilg] )? ) ;
    [GrammarRule("conditional")]
    private void conditional(ILGenerator ilg)
    {


        var tL = ilg.DefineLabel();
        var fL = ilg.DefineLabel();
        var nL = ilg.DefineLabel();

    	try { DebugEnterRule(GrammarFileName, "conditional");
    	DebugLocation(155, 1);
    	try
    	{
    		// StackGen.g:162:2: ( ^( IF expression[$ilg] t= block[$ilg] (f= block[$ilg] )? ) )
    		DebugEnterAlt(1);
    		// StackGen.g:162:4: ^( IF expression[$ilg] t= block[$ilg] (f= block[$ilg] )? )
    		{
    		DebugLocation(162, 4);
    		DebugLocation(162, 6);
    		Match(input,IF,Follow._IF_in_conditional698); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(162, 9);
    		PushFollow(Follow._expression_in_conditional700);
    		expression(ilg);
    		PopFollow();

    		DebugLocation(162, 26);
    		 ilg.Emit(OpCodes.Brtrue, tL); ilg.Emit(OpCodes.Br, fL); ilg.MarkLabel(tL); 
    		DebugLocation(163, 4);
    		PushFollow(Follow._block_in_conditional709);
    		block(ilg);
    		PopFollow();

    		DebugLocation(163, 17);
    		 ilg.Emit(OpCodes.Br, nL); ilg.MarkLabel(fL); 
    		DebugLocation(164, 3);
    		// StackGen.g:164:3: (f= block[$ilg] )?
    		int alt14=2;
    		try { DebugEnterSubRule(14);
    		try { DebugEnterDecision(14, decisionCanBacktrack[14]);
    		int LA14_0 = input.LA(1);

    		if ((LA14_0==BLOCK))
    		{
    			alt14=1;
    		}
    		} finally { DebugExitDecision(14); }
    		switch (alt14)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:164:4: f= block[$ilg]
    			{
    			DebugLocation(164, 5);
    			PushFollow(Follow._block_in_conditional719);
    			block(ilg);
    			PopFollow();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(14); }


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(164, 21);
    		 ilg.MarkLabel(nL); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(165, 1);
    	} finally { DebugExitRule(GrammarFileName, "conditional"); }
    	return;

    }
    // $ANTLR end "conditional"


    protected virtual void Enter_loop() {}
    protected virtual void Leave_loop() {}

    // $ANTLR start "loop"
    // StackGen.g:167:1: loop[ILGenerator ilg] : ^( WHILE expression[$ilg] block[$ilg] expression[$ilg] ) ;
    [GrammarRule("loop")]
    private void loop(ILGenerator ilg)
    {


        var tL = ilg.DefineLabel();
        var nL = ilg.DefineLabel();

    	try { DebugEnterRule(GrammarFileName, "loop");
    	DebugLocation(167, 1);
    	try
    	{
    		// StackGen.g:173:2: ( ^( WHILE expression[$ilg] block[$ilg] expression[$ilg] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:173:4: ^( WHILE expression[$ilg] block[$ilg] expression[$ilg] )
    		{
    		DebugLocation(173, 4);
    		DebugLocation(173, 6);
    		Match(input,WHILE,Follow._WHILE_in_loop744); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(173, 12);
    		PushFollow(Follow._expression_in_loop746);
    		expression(ilg);
    		PopFollow();

    		DebugLocation(173, 29);
    		 ilg.Emit(OpCodes.Brfalse, nL); ilg.MarkLabel(tL); 
    		DebugLocation(174, 3);
    		PushFollow(Follow._block_in_loop753);
    		block(ilg);
    		PopFollow();

    		DebugLocation(174, 15);
    		PushFollow(Follow._expression_in_loop756);
    		expression(ilg);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(174, 33);
    		 ilg.Emit(OpCodes.Brtrue, tL); ilg.MarkLabel(nL); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(175, 1);
    	} finally { DebugExitRule(GrammarFileName, "loop"); }
    	return;

    }
    // $ANTLR end "loop"


    protected virtual void Enter_delete() {}
    protected virtual void Leave_delete() {}

    // $ANTLR start "delete"
    // StackGen.g:177:1: delete[ILGenerator ilg] : ^( DELETE expression[$ilg] ) ;
    [GrammarRule("delete")]
    private void delete(ILGenerator ilg)
    {

    	try { DebugEnterRule(GrammarFileName, "delete");
    	DebugLocation(177, 1);
    	try
    	{
    		// StackGen.g:178:2: ( ^( DELETE expression[$ilg] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:178:4: ^( DELETE expression[$ilg] )
    		{
    		DebugLocation(178, 4);
    		DebugLocation(178, 6);
    		Match(input,DELETE,Follow._DELETE_in_delete774); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(178, 13);
    		PushFollow(Follow._expression_in_delete776);
    		expression(ilg);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(178, 31);
    		 ilg.Emit(OpCodes.Pop); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(179, 1);
    	} finally { DebugExitRule(GrammarFileName, "delete"); }
    	return;

    }
    // $ANTLR end "delete"


    protected virtual void Enter_ret() {}
    protected virtual void Leave_ret() {}

    // $ANTLR start "ret"
    // StackGen.g:181:1: ret[ILGenerator ilg] : ^( RETURN ( expression[$ilg] )? ) ;
    [GrammarRule("ret")]
    private void ret(ILGenerator ilg)
    {

    	try { DebugEnterRule(GrammarFileName, "ret");
    	DebugLocation(181, 1);
    	try
    	{
    		// StackGen.g:182:2: ( ^( RETURN ( expression[$ilg] )? ) )
    		DebugEnterAlt(1);
    		// StackGen.g:182:4: ^( RETURN ( expression[$ilg] )? )
    		{
    		DebugLocation(182, 4);
    		DebugLocation(182, 6);
    		Match(input,RETURN,Follow._RETURN_in_ret794); 

    		if (input.LA(1) == TokenTypes.Down)
    		{
    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(182, 13);
    			// StackGen.g:182:13: ( expression[$ilg] )?
    			int alt15=2;
    			try { DebugEnterSubRule(15);
    			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
    			int LA15_0 = input.LA(1);

    			if (((LA15_0>=TRUE && LA15_0<=NULL)||LA15_0==INVOKE||LA15_0==NEG||(LA15_0>=DOT && LA15_0<=INTEGER)))
    			{
    				alt15=1;
    			}
    			} finally { DebugExitDecision(15); }
    			switch (alt15)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// StackGen.g:182:14: expression[$ilg]
    				{
    				DebugLocation(182, 14);
    				PushFollow(Follow._expression_in_ret797);
    				expression(ilg);
    				PopFollow();


    				}
    				break;

    			}
    			} finally { DebugExitSubRule(15); }


    			Match(input, TokenTypes.Up, null); 
    		}
    		DebugLocation(182, 34);
    		 ilg.Emit(OpCodes.Ret); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(183, 1);
    	} finally { DebugExitRule(GrammarFileName, "ret"); }
    	return;

    }
    // $ANTLR end "ret"


    protected virtual void Enter_invocation() {}
    protected virtual void Leave_invocation() {}

    // $ANTLR start "invocation"
    // StackGen.g:185:1: invocation[ILGenerator ilg] : ^( INVOKE id= ID arguments[$ilg] ) ;
    [GrammarRule("invocation")]
    private void invocation(ILGenerator ilg)
    {

        CommonTree id=null;

    	try { DebugEnterRule(GrammarFileName, "invocation");
    	DebugLocation(185, 1);
    	try
    	{
    		// StackGen.g:186:2: ( ^( INVOKE id= ID arguments[$ilg] ) )
    		DebugEnterAlt(1);
    		// StackGen.g:186:4: ^( INVOKE id= ID arguments[$ilg] )
    		{
    		DebugLocation(186, 4);
    		DebugLocation(186, 6);
    		Match(input,INVOKE,Follow._INVOKE_in_invocation817); 

    		Match(input, TokenTypes.Down, null); 
    		DebugLocation(186, 15);
    		id=(CommonTree)Match(input,ID,Follow._ID_in_invocation821); 
    		DebugLocation(186, 19);
    		PushFollow(Follow._arguments_in_invocation823);
    		arguments(ilg);
    		PopFollow();


    		Match(input, TokenTypes.Up, null); 
    		DebugLocation(186, 36);
    		 ilg.Emit(OpCodes.Call, functionMap[(id!=null?id.Text:null)]); 

    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(187, 1);
    	} finally { DebugExitRule(GrammarFileName, "invocation"); }
    	return;

    }
    // $ANTLR end "invocation"


    protected virtual void Enter_lvalue() {}
    protected virtual void Leave_lvalue() {}

    // $ANTLR start "lvalue"
    // StackGen.g:189:1: lvalue[ILGenerator ilg] returns [VarBase vb = null] : ( ^( DOT lv= lvalue[$ilg] id= ID ) | id= ID );
    [GrammarRule("lvalue")]
    private VarBase lvalue(ILGenerator ilg)
    {

        VarBase vb =  null;

        CommonTree id=null;
        VarBase lv = default(VarBase);

    	try { DebugEnterRule(GrammarFileName, "lvalue");
    	DebugLocation(189, 1);
    	try
    	{
    		// StackGen.g:190:2: ( ^( DOT lv= lvalue[$ilg] id= ID ) | id= ID )
    		int alt16=2;
    		try { DebugEnterDecision(16, decisionCanBacktrack[16]);
    		int LA16_0 = input.LA(1);

    		if ((LA16_0==DOT))
    		{
    			alt16=1;
    		}
    		else if ((LA16_0==ID))
    		{
    			alt16=2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 16, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(16); }
    		switch (alt16)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:190:4: ^( DOT lv= lvalue[$ilg] id= ID )
    			{
    			DebugLocation(190, 4);
    			DebugLocation(190, 6);
    			Match(input,DOT,Follow._DOT_in_lvalue845); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(190, 12);
    			PushFollow(Follow._lvalue_in_lvalue849);
    			lv=lvalue(ilg);
    			PopFollow();

    			DebugLocation(190, 28);
    			id=(CommonTree)Match(input,ID,Follow._ID_in_lvalue854); 

    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(190, 33);
    			 lv.Load(ilg); vb = new VarField(typeMap[lv.VarType.Name].GetField((id!=null?id.Text:null))); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:191:4: id= ID
    			{
    			DebugLocation(191, 6);
    			id=(CommonTree)Match(input,ID,Follow._ID_in_lvalue864); 
    			DebugLocation(191, 10);
    			 vb = getVar((id!=null?id.Text:null)); 

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(192, 1);
    	} finally { DebugExitRule(GrammarFileName, "lvalue"); }
    	return vb;

    }
    // $ANTLR end "lvalue"


    protected virtual void Enter_expression() {}
    protected virtual void Leave_expression() {}

    // $ANTLR start "expression"
    // StackGen.g:194:1: expression[ILGenerator ilg] returns [Type r = null] : ( ^( AND expression[$ilg] expression[$ilg] ) | ^( OR expression[$ilg] expression[$ilg] ) | ^( EQ expression[$ilg] expression[$ilg] ) | ^( LT expression[$ilg] expression[$ilg] ) | ^( GT expression[$ilg] expression[$ilg] ) | ^( NE expression[$ilg] expression[$ilg] ) | ^( LE expression[$ilg] expression[$ilg] ) | ^( GE expression[$ilg] expression[$ilg] ) | ^( PLUS expression[$ilg] expression[$ilg] ) | ^( MINUS expression[$ilg] expression[$ilg] ) | ^( TIMES expression[$ilg] expression[$ilg] ) | ^( DIVIDE expression[$ilg] expression[$ilg] ) | ^( NOT e= expression[$ilg] ) | ^( NEG e= expression[$ilg] ) | s= selector[$ilg] );
    [GrammarRule("expression")]
    private Type expression(ILGenerator ilg)
    {

        Type r =  null;

        Type e = default(Type);
        Type s = default(Type);

    	try { DebugEnterRule(GrammarFileName, "expression");
    	DebugLocation(194, 1);
    	try
    	{
    		// StackGen.g:195:2: ( ^( AND expression[$ilg] expression[$ilg] ) | ^( OR expression[$ilg] expression[$ilg] ) | ^( EQ expression[$ilg] expression[$ilg] ) | ^( LT expression[$ilg] expression[$ilg] ) | ^( GT expression[$ilg] expression[$ilg] ) | ^( NE expression[$ilg] expression[$ilg] ) | ^( LE expression[$ilg] expression[$ilg] ) | ^( GE expression[$ilg] expression[$ilg] ) | ^( PLUS expression[$ilg] expression[$ilg] ) | ^( MINUS expression[$ilg] expression[$ilg] ) | ^( TIMES expression[$ilg] expression[$ilg] ) | ^( DIVIDE expression[$ilg] expression[$ilg] ) | ^( NOT e= expression[$ilg] ) | ^( NEG e= expression[$ilg] ) | s= selector[$ilg] )
    		int alt17=15;
    		try { DebugEnterDecision(17, decisionCanBacktrack[17]);
    		switch (input.LA(1))
    		{
    		case AND:
    			{
    			alt17=1;
    			}
    			break;
    		case OR:
    			{
    			alt17=2;
    			}
    			break;
    		case EQ:
    			{
    			alt17=3;
    			}
    			break;
    		case LT:
    			{
    			alt17=4;
    			}
    			break;
    		case GT:
    			{
    			alt17=5;
    			}
    			break;
    		case NE:
    			{
    			alt17=6;
    			}
    			break;
    		case LE:
    			{
    			alt17=7;
    			}
    			break;
    		case GE:
    			{
    			alt17=8;
    			}
    			break;
    		case PLUS:
    			{
    			alt17=9;
    			}
    			break;
    		case MINUS:
    			{
    			alt17=10;
    			}
    			break;
    		case TIMES:
    			{
    			alt17=11;
    			}
    			break;
    		case DIVIDE:
    			{
    			alt17=12;
    			}
    			break;
    		case NOT:
    			{
    			alt17=13;
    			}
    			break;
    		case NEG:
    			{
    			alt17=14;
    			}
    			break;
    		case TRUE:
    		case FALSE:
    		case NEW:
    		case NULL:
    		case INVOKE:
    		case DOT:
    		case ID:
    		case INTEGER:
    			{
    			alt17=15;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(17); }
    		switch (alt17)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:195:4: ^( AND expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(195, 4);
    			DebugLocation(195, 6);
    			Match(input,AND,Follow._AND_in_expression884); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(195, 10);
    			PushFollow(Follow._expression_in_expression886);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(195, 27);
    			PushFollow(Follow._expression_in_expression889);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(195, 45);
    			 ilg.Emit(OpCodes.And); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:196:4: ^( OR expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(196, 4);
    			DebugLocation(196, 6);
    			Match(input,OR,Follow._OR_in_expression899); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(196, 9);
    			PushFollow(Follow._expression_in_expression901);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(196, 26);
    			PushFollow(Follow._expression_in_expression904);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(196, 44);
    			 ilg.Emit(OpCodes.Or); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// StackGen.g:197:4: ^( EQ expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(197, 4);
    			DebugLocation(197, 6);
    			Match(input,EQ,Follow._EQ_in_expression914); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(197, 9);
    			PushFollow(Follow._expression_in_expression916);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(197, 26);
    			PushFollow(Follow._expression_in_expression919);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(197, 44);
    			 ilg.Emit(OpCodes.Ceq); 

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// StackGen.g:198:4: ^( LT expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(198, 4);
    			DebugLocation(198, 6);
    			Match(input,LT,Follow._LT_in_expression929); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(198, 9);
    			PushFollow(Follow._expression_in_expression931);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(198, 26);
    			PushFollow(Follow._expression_in_expression934);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(198, 44);
    			 ilg.Emit(OpCodes.Clt); 

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// StackGen.g:199:4: ^( GT expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(199, 4);
    			DebugLocation(199, 6);
    			Match(input,GT,Follow._GT_in_expression944); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(199, 9);
    			PushFollow(Follow._expression_in_expression946);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(199, 26);
    			PushFollow(Follow._expression_in_expression949);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(199, 44);
    			 ilg.Emit(OpCodes.Cgt); 

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// StackGen.g:200:4: ^( NE expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(200, 4);
    			DebugLocation(200, 6);
    			Match(input,NE,Follow._NE_in_expression959); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(200, 9);
    			PushFollow(Follow._expression_in_expression961);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(200, 26);
    			PushFollow(Follow._expression_in_expression964);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(200, 44);
    			 ilg.Emit(OpCodes.Ceq); ilg.Emit(OpCodes.Ldc_I4_0); ilg.Emit(OpCodes.Ceq); 

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// StackGen.g:201:4: ^( LE expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(201, 4);
    			DebugLocation(201, 6);
    			Match(input,LE,Follow._LE_in_expression974); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(201, 9);
    			PushFollow(Follow._expression_in_expression976);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(201, 26);
    			PushFollow(Follow._expression_in_expression979);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(201, 44);
    			 ilg.Emit(OpCodes.Cgt); ilg.Emit(OpCodes.Ldc_I4_0); ilg.Emit(OpCodes.Ceq); 

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// StackGen.g:202:4: ^( GE expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(202, 4);
    			DebugLocation(202, 6);
    			Match(input,GE,Follow._GE_in_expression989); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(202, 9);
    			PushFollow(Follow._expression_in_expression991);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(202, 26);
    			PushFollow(Follow._expression_in_expression994);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(202, 44);
    			 ilg.Emit(OpCodes.Clt); ilg.Emit(OpCodes.Ldc_I4_0); ilg.Emit(OpCodes.Ceq); 

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// StackGen.g:203:4: ^( PLUS expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(203, 4);
    			DebugLocation(203, 6);
    			Match(input,PLUS,Follow._PLUS_in_expression1004); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(203, 11);
    			PushFollow(Follow._expression_in_expression1006);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(203, 28);
    			PushFollow(Follow._expression_in_expression1009);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(203, 46);
    			 ilg.Emit(OpCodes.Add); 

    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// StackGen.g:204:4: ^( MINUS expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(204, 4);
    			DebugLocation(204, 6);
    			Match(input,MINUS,Follow._MINUS_in_expression1019); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(204, 12);
    			PushFollow(Follow._expression_in_expression1021);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(204, 29);
    			PushFollow(Follow._expression_in_expression1024);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(204, 47);
    			 ilg.Emit(OpCodes.Sub); 

    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// StackGen.g:205:4: ^( TIMES expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(205, 4);
    			DebugLocation(205, 6);
    			Match(input,TIMES,Follow._TIMES_in_expression1034); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(205, 12);
    			PushFollow(Follow._expression_in_expression1036);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(205, 29);
    			PushFollow(Follow._expression_in_expression1039);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(205, 47);
    			 ilg.Emit(OpCodes.Mul); 

    			}
    			break;
    		case 12:
    			DebugEnterAlt(12);
    			// StackGen.g:206:4: ^( DIVIDE expression[$ilg] expression[$ilg] )
    			{
    			DebugLocation(206, 4);
    			DebugLocation(206, 6);
    			Match(input,DIVIDE,Follow._DIVIDE_in_expression1049); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(206, 13);
    			PushFollow(Follow._expression_in_expression1051);
    			expression(ilg);
    			PopFollow();

    			DebugLocation(206, 30);
    			PushFollow(Follow._expression_in_expression1054);
    			expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(206, 48);
    			 ilg.Emit(OpCodes.Div); 

    			}
    			break;
    		case 13:
    			DebugEnterAlt(13);
    			// StackGen.g:207:4: ^( NOT e= expression[$ilg] )
    			{
    			DebugLocation(207, 4);
    			DebugLocation(207, 6);
    			Match(input,NOT,Follow._NOT_in_expression1064); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(207, 11);
    			PushFollow(Follow._expression_in_expression1068);
    			e=expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(207, 30);
    			 ilg.Emit(OpCodes.Ldc_I4_0); ilg.Emit(OpCodes.Ceq); 

    			}
    			break;
    		case 14:
    			DebugEnterAlt(14);
    			// StackGen.g:208:4: ^( NEG e= expression[$ilg] )
    			{
    			DebugLocation(208, 4);
    			DebugLocation(208, 6);
    			Match(input,NEG,Follow._NEG_in_expression1078); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(208, 11);
    			PushFollow(Follow._expression_in_expression1082);
    			e=expression(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(208, 30);
    			 ilg.Emit(OpCodes.Neg); 

    			}
    			break;
    		case 15:
    			DebugEnterAlt(15);
    			// StackGen.g:209:4: s= selector[$ilg]
    			{
    			DebugLocation(209, 5);
    			PushFollow(Follow._selector_in_expression1093);
    			s=selector(ilg);
    			PopFollow();

    			DebugLocation(209, 21);
    			r = s;

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(210, 1);
    	} finally { DebugExitRule(GrammarFileName, "expression"); }
    	return r;

    }
    // $ANTLR end "expression"


    protected virtual void Enter_selector() {}
    protected virtual void Leave_selector() {}

    // $ANTLR start "selector"
    // StackGen.g:212:1: selector[ILGenerator ilg] returns [Type r = null] : ( ^( DOT s= selector[$ilg] id= ID ) | f= factor[$ilg] );
    [GrammarRule("selector")]
    private Type selector(ILGenerator ilg)
    {

        Type r =  null;

        CommonTree id=null;
        Type s = default(Type);
        Type f = default(Type);

    	try { DebugEnterRule(GrammarFileName, "selector");
    	DebugLocation(212, 1);
    	try
    	{
    		// StackGen.g:213:2: ( ^( DOT s= selector[$ilg] id= ID ) | f= factor[$ilg] )
    		int alt18=2;
    		try { DebugEnterDecision(18, decisionCanBacktrack[18]);
    		int LA18_0 = input.LA(1);

    		if ((LA18_0==DOT))
    		{
    			alt18=1;
    		}
    		else if (((LA18_0>=TRUE && LA18_0<=NULL)||LA18_0==INVOKE||(LA18_0>=ID && LA18_0<=INTEGER)))
    		{
    			alt18=2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 18, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(18); }
    		switch (alt18)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:213:4: ^( DOT s= selector[$ilg] id= ID )
    			{
    			DebugLocation(213, 4);
    			DebugLocation(213, 6);
    			Match(input,DOT,Follow._DOT_in_selector1114); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(213, 11);
    			PushFollow(Follow._selector_in_selector1118);
    			s=selector(ilg);
    			PopFollow();

    			DebugLocation(213, 29);
    			id=(CommonTree)Match(input,ID,Follow._ID_in_selector1123); 

    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(213, 34);
    			 var field = typeMap[s.Name].GetField((id!=null?id.Text:null)); ilg.Emit(OpCodes.Ldfld, field); r = field.FieldType; 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:214:4: f= factor[$ilg]
    			{
    			DebugLocation(214, 5);
    			PushFollow(Follow._factor_in_selector1133);
    			f=factor(ilg);
    			PopFollow();

    			DebugLocation(214, 19);
    			 r = f; 

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(215, 1);
    	} finally { DebugExitRule(GrammarFileName, "selector"); }
    	return r;

    }
    // $ANTLR end "selector"


    protected virtual void Enter_factor() {}
    protected virtual void Leave_factor() {}

    // $ANTLR start "factor"
    // StackGen.g:217:1: factor[ILGenerator ilg] returns [Type r = null] : ( ^( INVOKE id= ID arguments[$ilg] ) | id= ID | i= INTEGER | TRUE | FALSE | ^( NEW id= ID ) | NULL );
    [GrammarRule("factor")]
    private Type factor(ILGenerator ilg)
    {

        Type r =  null;

        CommonTree id=null;
        CommonTree i=null;

    	try { DebugEnterRule(GrammarFileName, "factor");
    	DebugLocation(217, 1);
    	try
    	{
    		// StackGen.g:218:2: ( ^( INVOKE id= ID arguments[$ilg] ) | id= ID | i= INTEGER | TRUE | FALSE | ^( NEW id= ID ) | NULL )
    		int alt19=7;
    		try { DebugEnterDecision(19, decisionCanBacktrack[19]);
    		switch (input.LA(1))
    		{
    		case INVOKE:
    			{
    			alt19=1;
    			}
    			break;
    		case ID:
    			{
    			alt19=2;
    			}
    			break;
    		case INTEGER:
    			{
    			alt19=3;
    			}
    			break;
    		case TRUE:
    			{
    			alt19=4;
    			}
    			break;
    		case FALSE:
    			{
    			alt19=5;
    			}
    			break;
    		case NEW:
    			{
    			alt19=6;
    			}
    			break;
    		case NULL:
    			{
    			alt19=7;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(19); }
    		switch (alt19)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:218:4: ^( INVOKE id= ID arguments[$ilg] )
    			{
    			DebugLocation(218, 4);
    			DebugLocation(218, 6);
    			Match(input,INVOKE,Follow._INVOKE_in_factor1154); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(218, 15);
    			id=(CommonTree)Match(input,ID,Follow._ID_in_factor1158); 
    			DebugLocation(218, 19);
    			PushFollow(Follow._arguments_in_factor1160);
    			arguments(ilg);
    			PopFollow();


    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(218, 36);
    			 ilg.Emit(OpCodes.Call, functionMap[(id!=null?id.Text:null)]); r = functionMap[(id!=null?id.Text:null)].ReturnType; 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:219:4: id= ID
    			{
    			DebugLocation(219, 6);
    			id=(CommonTree)Match(input,ID,Follow._ID_in_factor1171); 
    			DebugLocation(219, 10);
    			 var vb = getVar((id!=null?id.Text:null)); vb.Load(ilg); r = vb.VarType; 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// StackGen.g:220:4: i= INTEGER
    			{
    			DebugLocation(220, 5);
    			i=(CommonTree)Match(input,INTEGER,Follow._INTEGER_in_factor1180); 
    			DebugLocation(220, 14);
    			 ilg.Emit(OpCodes.Ldc_I4, int.Parse((i!=null?i.Text:null))); 

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// StackGen.g:221:4: TRUE
    			{
    			DebugLocation(221, 4);
    			Match(input,TRUE,Follow._TRUE_in_factor1187); 
    			DebugLocation(221, 9);
    			 ilg.Emit(OpCodes.Ldc_I4_1); 

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// StackGen.g:222:4: FALSE
    			{
    			DebugLocation(222, 4);
    			Match(input,FALSE,Follow._FALSE_in_factor1194); 
    			DebugLocation(222, 10);
    			 ilg.Emit(OpCodes.Ldc_I4_0); 

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// StackGen.g:223:4: ^( NEW id= ID )
    			{
    			DebugLocation(223, 4);
    			DebugLocation(223, 6);
    			Match(input,NEW,Follow._NEW_in_factor1202); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(223, 12);
    			id=(CommonTree)Match(input,ID,Follow._ID_in_factor1206); 

    			Match(input, TokenTypes.Up, null); 
    			DebugLocation(223, 17);
    			 ilg.Emit(OpCodes.Newobj, typeMap[(id!=null?id.Text:null)].GetConstructor(Type.EmptyTypes)); r = typeMap[(id!=null?id.Text:null)]; 

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// StackGen.g:224:4: NULL
    			{
    			DebugLocation(224, 4);
    			Match(input,NULL,Follow._NULL_in_factor1214); 
    			DebugLocation(224, 9);
    			 ilg.Emit(OpCodes.Ldnull); 

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(225, 1);
    	} finally { DebugExitRule(GrammarFileName, "factor"); }
    	return r;

    }
    // $ANTLR end "factor"


    protected virtual void Enter_arguments() {}
    protected virtual void Leave_arguments() {}

    // $ANTLR start "arguments"
    // StackGen.g:227:1: arguments[ILGenerator ilg] : arg_list[$ilg] ;
    [GrammarRule("arguments")]
    private void arguments(ILGenerator ilg)
    {

    	try { DebugEnterRule(GrammarFileName, "arguments");
    	DebugLocation(227, 1);
    	try
    	{
    		// StackGen.g:228:2: ( arg_list[$ilg] )
    		DebugEnterAlt(1);
    		// StackGen.g:228:4: arg_list[$ilg]
    		{
    		DebugLocation(228, 4);
    		PushFollow(Follow._arg_list_in_arguments1229);
    		arg_list(ilg);
    		PopFollow();


    		}

    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(229, 1);
    	} finally { DebugExitRule(GrammarFileName, "arguments"); }
    	return;

    }
    // $ANTLR end "arguments"


    protected virtual void Enter_arg_list() {}
    protected virtual void Leave_arg_list() {}

    // $ANTLR start "arg_list"
    // StackGen.g:231:1: arg_list[ILGenerator ilg] : ( ^( ARGS ( expression[$ilg] )+ ) | ARGS );
    [GrammarRule("arg_list")]
    private void arg_list(ILGenerator ilg)
    {

    	try { DebugEnterRule(GrammarFileName, "arg_list");
    	DebugLocation(231, 1);
    	try
    	{
    		// StackGen.g:232:2: ( ^( ARGS ( expression[$ilg] )+ ) | ARGS )
    		int alt21=2;
    		try { DebugEnterDecision(21, decisionCanBacktrack[21]);
    		int LA21_0 = input.LA(1);

    		if ((LA21_0==ARGS))
    		{
    			int LA21_1 = input.LA(2);

    			if ((LA21_1==DOWN))
    			{
    				alt21=1;
    			}
    			else if ((LA21_1==UP))
    			{
    				alt21=2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 21, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 21, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(21); }
    		switch (alt21)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// StackGen.g:232:4: ^( ARGS ( expression[$ilg] )+ )
    			{
    			DebugLocation(232, 4);
    			DebugLocation(232, 6);
    			Match(input,ARGS,Follow._ARGS_in_arg_list1244); 

    			Match(input, TokenTypes.Down, null); 
    			DebugLocation(232, 11);
    			// StackGen.g:232:11: ( expression[$ilg] )+
    			int cnt20=0;
    			try { DebugEnterSubRule(20);
    			while (true)
    			{
    				int alt20=2;
    				try { DebugEnterDecision(20, decisionCanBacktrack[20]);
    				int LA20_0 = input.LA(1);

    				if (((LA20_0>=TRUE && LA20_0<=NULL)||LA20_0==INVOKE||LA20_0==NEG||(LA20_0>=DOT && LA20_0<=INTEGER)))
    				{
    					alt20=1;
    				}


    				} finally { DebugExitDecision(20); }
    				switch (alt20)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// StackGen.g:232:12: expression[$ilg]
    					{
    					DebugLocation(232, 12);
    					PushFollow(Follow._expression_in_arg_list1247);
    					expression(ilg);
    					PopFollow();


    					}
    					break;

    				default:
    					if (cnt20 >= 1)
    						goto loop20;

    					EarlyExitException eee20 = new EarlyExitException( 20, input );
    					DebugRecognitionException(eee20);
    					throw eee20;
    				}
    				cnt20++;
    			}
    			loop20:
    				;

    			} finally { DebugExitSubRule(20); }


    			Match(input, TokenTypes.Up, null); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// StackGen.g:233:4: ARGS
    			{
    			DebugLocation(233, 4);
    			Match(input,ARGS,Follow._ARGS_in_arg_list1257); 

    			}
    			break;

    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	}
    	finally
    	{
        }
     	DebugLocation(234, 1);
    	} finally { DebugExitRule(GrammarFileName, "arg_list"); }
    	return;

    }
    // $ANTLR end "arg_list"

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _PROGRAM_in_program55 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _types_in_program58 = new BitSet(new ulong[]{0x0000000003000000UL});
		public static readonly BitSet _declarations_in_program62 = new BitSet(new ulong[]{0x0000000003000000UL});
		public static readonly BitSet _functions_in_program66 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _TYPES_in_types84 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _types_sub_in_types86 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _TYPES_in_types95 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _STRUCT_in_type_declaration117 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_type_declaration122 = new BitSet(new ulong[]{0x0000000004000000UL});
		public static readonly BitSet _nested_decl_in_type_declaration136 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _field_decl_in_nested_decl159 = new BitSet(new ulong[]{0x0000000004000002UL});
		public static readonly BitSet _type_declaration_in_types_sub179 = new BitSet(new ulong[]{0x0000000000000010UL});
		public static readonly BitSet _types_sub_in_types_sub181 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _DECL_in_field_decl207 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _TYPE_in_field_decl210 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _type_in_field_decl214 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _ID_in_field_decl219 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _INT_in_type239 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _BOOL_in_type246 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _STRUCT_in_type254 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_type258 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _DECLS_in_declarations276 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _declaration_in_declarations278 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _decl_list_in_declaration297 = new BitSet(new ulong[]{0x0000000008000002UL});
		public static readonly BitSet _DECLLIST_in_decl_list313 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _TYPE_in_decl_list316 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _type_in_decl_list320 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _id_list_in_decl_list323 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _ID_in_id_list340 = new BitSet(new ulong[]{0x0100000000000002UL});
		public static readonly BitSet _FUNCS_in_functions356 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _function_in_functions358 = new BitSet(new ulong[]{0x0000000000000088UL});
		public static readonly BitSet _FUN_in_function377 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_function381 = new BitSet(new ulong[]{0x0000000010000000UL});
		public static readonly BitSet _parameters_in_function385 = new BitSet(new ulong[]{0x0000000020000000UL});
		public static readonly BitSet _RETTYPE_in_function388 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _return_type_in_function392 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _declarations_in_function401 = new BitSet(new ulong[]{0x0000000080000000UL});
		public static readonly BitSet _statement_list_in_function407 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _PARAMS_in_parameters430 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _param_decl_in_parameters432 = new BitSet(new ulong[]{0x0000000004000008UL});
		public static readonly BitSet _DECL_in_param_decl453 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _TYPE_in_param_decl456 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _type_in_param_decl460 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _ID_in_param_decl465 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _type_in_return_type487 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _VOID_in_return_type494 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_statement509 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assignment_in_statement515 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _print_in_statement521 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _read_in_statement527 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _conditional_in_statement533 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _loop_in_statement539 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _delete_in_statement545 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ret_in_statement551 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _invocation_in_statement557 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _BLOCK_in_block572 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _statement_list_in_block574 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _STMTS_in_statement_list590 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _statement_in_statement_list593 = new BitSet(new ulong[]{0x000002014001DA08UL});
		public static readonly BitSet _ASSIGN_in_assignment613 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _lvalue_in_assignment617 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_assignment620 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _PRINT_in_print642 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_print644 = new BitSet(new ulong[]{0x0000000000000408UL});
		public static readonly BitSet _ENDL_in_print650 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _READ_in_read671 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _lvalue_in_read675 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _IF_in_conditional698 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_conditional700 = new BitSet(new ulong[]{0x0000000040000000UL});
		public static readonly BitSet _block_in_conditional709 = new BitSet(new ulong[]{0x0000000040000008UL});
		public static readonly BitSet _block_in_conditional719 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _WHILE_in_loop744 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_loop746 = new BitSet(new ulong[]{0x0000000040000000UL});
		public static readonly BitSet _block_in_loop753 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_loop756 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _DELETE_in_delete774 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_delete776 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _RETURN_in_ret794 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_ret797 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _INVOKE_in_invocation817 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_invocation821 = new BitSet(new ulong[]{0x0000000200000000UL});
		public static readonly BitSet _arguments_in_invocation823 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _DOT_in_lvalue845 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _lvalue_in_lvalue849 = new BitSet(new ulong[]{0x0100000000000000UL});
		public static readonly BitSet _ID_in_lvalue854 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _ID_in_lvalue864 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _AND_in_expression884 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression886 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression889 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _OR_in_expression899 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression901 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression904 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _EQ_in_expression914 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression916 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression919 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _LT_in_expression929 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression931 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression934 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _GT_in_expression944 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression946 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression949 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _NE_in_expression959 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression961 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression964 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _LE_in_expression974 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression976 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression979 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _GE_in_expression989 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression991 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression994 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _PLUS_in_expression1004 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression1006 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression1009 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _MINUS_in_expression1019 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression1021 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression1024 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _TIMES_in_expression1034 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression1036 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression1039 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _DIVIDE_in_expression1049 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression1051 = new BitSet(new ulong[]{0x03FFFC05001E0000UL});
		public static readonly BitSet _expression_in_expression1054 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _NOT_in_expression1064 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression1068 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _NEG_in_expression1078 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_expression1082 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _selector_in_expression1093 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _DOT_in_selector1114 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _selector_in_selector1118 = new BitSet(new ulong[]{0x0100000000000000UL});
		public static readonly BitSet _ID_in_selector1123 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _factor_in_selector1133 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _INVOKE_in_factor1154 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_factor1158 = new BitSet(new ulong[]{0x0000000200000000UL});
		public static readonly BitSet _arguments_in_factor1160 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _ID_in_factor1171 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _INTEGER_in_factor1180 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _TRUE_in_factor1187 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _FALSE_in_factor1194 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _NEW_in_factor1202 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _ID_in_factor1206 = new BitSet(new ulong[]{0x0000000000000008UL});
		public static readonly BitSet _NULL_in_factor1214 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arg_list_in_arguments1229 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ARGS_in_arg_list1244 = new BitSet(new ulong[]{0x0000000000000004UL});
		public static readonly BitSet _expression_in_arg_list1247 = new BitSet(new ulong[]{0x03FFFC05001E0008UL});
		public static readonly BitSet _ARGS_in_arg_list1257 = new BitSet(new ulong[]{0x0000000000000002UL});

	}
	#endregion Follow sets
}
}