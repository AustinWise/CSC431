<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ Import Namespace="System.Collections.Generic" #>
namespace CSC431.Stack
{

<#
foreach (var instr in InstrInfo.GetAll())
{
    var className = instr.Name.Substring(1).Insert(0, char.ToUpper(instr.Name[0]).ToString()) + "Instruction";
#>
class <#=className #> : StackInstruction
{
	public <#=className #>
	(
<#
instr.ForEachOperand((c, count, isLast) =>
{
    Write("{0} {1}{2}", c.Type, c.LowerPrefix, count);
    if (!isLast)
        Write(",");
});
#>
	) : base ("<#=instr.Name #>")
	{
<#
instr.ForEachOperand((c, count, isLast) =>
{
    Write("this.{0}{1} = {2}{1};", c.UpperPrefix, count, c.LowerPrefix);
});
if (instr.IsSetCC)
{
#>
		this.CcSet = true;
<#
}
#>
	}

<#
instr.ForEachOperand((c, count, isLast) =>
{
    Write("public {1} {2}{0}{{ get; private set; }}", count, c.Type, c.UpperPrefix);
});
#>
public override string ToString()
{
<#
int placeHolderCount = 1;
string formatStr = "{0}";
instr.ForEachOperand((c, count, isLast) =>
{
    formatStr += " " + c.MilocPrefix + "{" + placeHolderCount++ + "}" + c.MilocPostfix;
    if (!isLast)
        formatStr += ",";
});
Write("return string.Format(\"{0}\", Name", formatStr);
instr.ForEachOperand((c, count, isLast) =>
{
    string field = c.UpperPrefix + count;
    Write(", ");
    if (string.IsNullOrEmpty(c.SpecialConversion))
        Write(field);
    else
        Write(c.SpecialConversion, field);
});
#>
);
}
}



<#
}
#>

}
<#+
[Flags]
private enum InstrFlags : int
{
    SetCC = 1,
    UseCC = 2
}
private class OperandType
{
    private static Dictionary<char, OperandType> sTypes = new Dictionary<char, OperandType>();
    static OperandType()
    {
        sTypes.Add('r', new OperandType() { LowerPrefix = "reg", UpperPrefix = "Reg", MilocPrefix = "r", Type = "int" });
        sTypes.Add('l', new OperandType() { LowerPrefix = "label", UpperPrefix = "Label", MilocPrefix = "L", Type = "int" });
        sTypes.Add('L', new OperandType() { LowerPrefix = "label", UpperPrefix = "Label", MilocPrefix = "L", Type = "Label<MilocInstruction>" });
        sTypes.Add('i', new OperandType() { LowerPrefix = "immed", UpperPrefix = "Immed", Type = "int" });
        sTypes.Add('s', new OperandType() { LowerPrefix = "str", UpperPrefix = "Str", Type = "string" });
        sTypes.Add('a', new OperandType() { LowerPrefix = "arr", UpperPrefix = "Arr", MilocPrefix = "[", MilocPostfix = "]", Type = "string[]", SpecialConversion = "string.Join(\", \", {0})" });
    }

    public string LowerPrefix { get; private set; }
    public string UpperPrefix { get; private set; }
    public string MilocPrefix { get; private set; }
    public string MilocPostfix { get; private set; }
    public string Type { get; private set; }
    public string SpecialConversion { get; private set; }

    public static OperandType Get(char letter)
    {
        return sTypes[letter];
    }
}
private class InstrInfo
{
    public InstrInfo(String type, string name)
    {
        this.Type = type;
        this.Name = name;
    }

    public InstrInfo(String type, string name, InstrFlags flags)
        : this(type, name)
    {
        this.Flags = flags;
    }

    public InstrFlags Flags { get; private set; }
    public string Type { get; private set; }
    public string Name { get; private set; }

    public bool IsSetCC
    {
        get
        {
            return ((Flags & InstrFlags.SetCC) != 0);
        }
    }

    public void ForEachOperand(Action<OperandType, int, bool> f)
    {
        var count = new Dictionary<char, int>();
        for (int i = 0; i < Type.Length; i++)
        {
            char c = Type[i];
            if (!count.ContainsKey(c))
                count[c] = 0;
            f(OperandType.Get(c), count[c]++, i == Type.Length - 1);
        }
    }

    public static InstrInfo[] GetAll()
    {
        return new InstrInfo[0];
    }
}
#>