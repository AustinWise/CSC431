<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ Import Namespace="System.Collections.Generic" #>
namespace CSC431.ILOC
{

<#
foreach (var instr in InstrInfo.GetAll())
{
    var className = instr.Name.Substring(1).Insert(0, char.ToUpper(instr.Name[0]).ToString()) + "Instruction";
#>
class <#=className #> : <#=instr.BaseClass #>
{
	public <#=className #>
<#
switch (instr.Type)
{
    case '1':
        {
#>(int reg) : base("<#=instr.Name #>", reg)
	{
<#
}
        break;
    case '3':
        {
#>(int rx, int ry, int rd) : base("<#=instr.Name #>", rx, ry, rd)
	{
<#
}
        break;
    case 'i':
        {
#>(int reg, int val) : base("<#=instr.Name #>", reg, val)
	{
<#
}
        break;
    case 'o':
        {
#>(int rx, int i, int rd) : base("<#=instr.Name #>", rx, i, rd)
	{
<#
}
        break;
    default:
        throw new NotSupportedException();
}
#>
	}
}



<#
}
#>

}
<#+
private class InstrInfo
{
    public InstrInfo(char type, string name)
    {
        this.Type = type;
        this.Name = name;
    }

    public char Type { get; private set; }
    public string Name { get; private set; }
    public string BaseClass
    {
        get
        {
            switch (Type)
            {
                case '1':
                    return "SingleRegisterInstruction";
                case '2':
                    return "DoubleRegisterInstruction";
                case '3':
                    return "TripleRegisterInstruction";
                case 'i':
                    return "ImmediateSingleRegisterInstruction";
                case 'o':
                    return "ImmediateDoubleRegisterInstruction";
                default:
                    throw new NotSupportedException();
            }
        }
    }

    public static InstrInfo[] GetAll()
    {
        return new[]
            {
                new InstrInfo('3', "add"),
                new InstrInfo('o', "addi"),
                new InstrInfo('3', "div"),
                new InstrInfo('3', "mult"),
                new InstrInfo('3', "sub"),
                new InstrInfo('o', "rsubi"),
                new InstrInfo('3', "and"),
                new InstrInfo('3', "or"),
                new InstrInfo('o', "xori"),
                new InstrInfo('i', "loadi"),
                new InstrInfo('1', "print"),
                new InstrInfo('1', "read")
            };
    }
}
#>