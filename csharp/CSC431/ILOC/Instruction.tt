<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ Import Namespace="System.Collections.Generic" #>
namespace CSC431.ILOC
{

<#
foreach (var instr in InstrInfo.GetAll())
{
    var className = instr.Name.Substring(1).Insert(0, char.ToUpper(instr.Name[0]).ToString()) + "Instruction";
#>
class <#=className #> : <#=instr.BaseClass #>
{
	public <#=className #>
<#
switch (instr.Type)
{
    case InstrType.SingleReg:
        {
#>(int reg) : base("<#=instr.Name #>", reg)
	{
<#
}
        break;
    case InstrType.DoubleReg:
        {
#>(int rx, int ry) : base("<#=instr.Name #>", rx, ry)
	{
<#
}
        break;
    case InstrType.TripleReg:
        {
#>(int rx, int ry, int rd) : base("<#=instr.Name #>", rx, ry, rd)
	{
<#
}
        break;
    case InstrType.ImmediateSingleReg:
        {
#>(int reg, int val) : base("<#=instr.Name #>", reg, val)
	{
<#
}
        break;
    case InstrType.ImmediateDoubleReg:
        {
#>(int rx, int i, int rd) : base("<#=instr.Name #>", rx, i, rd)
	{
<#
}
        break;
    case InstrType.SingleLabel:
        {
#>(int label) : base("<#=instr.Name #>", label)
	{
<#
}
        break;
    case InstrType.DoubleLabel:
        {
#>(int l1, int l2) : base("<#=instr.Name #>", l1, l2)
	{
<#
}
        break;
    default:
        throw new NotSupportedException();
}
if (instr.IsSetCC)
{
#>
		this.CcSet = true;
<#
}
#>
	}
}



<#
}
#>

}
<#+
[Flags]
private enum InstrFlags : int
{
    SetCC = 1,
    UseCC = 2
}
private enum InstrType
{
    SingleReg,
    DoubleReg,
    TripleReg,
    ImmediateSingleReg,
    ImmediateDoubleReg,
    SingleLabel,
    DoubleLabel
}
private class InstrInfo
{
    public InstrInfo(InstrType type, string name)
    {
        this.Type = type;
        this.Name = name;
    }

    public InstrInfo(InstrType type, string name, InstrFlags flags)
        : this(type, name)
    {
        this.Flags = flags;
    }

    public InstrFlags Flags { get; private set; }
    public InstrType Type { get; private set; }
    public string Name { get; private set; }
    
    public string BaseClass
    {
        get
        {
            switch (Type)
            {
                case InstrType.SingleReg:
                    return "SingleRegisterInstruction";
                case InstrType.DoubleReg:
                    return "DoubleRegisterInstruction";
                case InstrType.TripleReg:
                    return "TripleRegisterInstruction";
                case InstrType.ImmediateSingleReg:
                    return "ImmediateSingleRegisterInstruction";
                case InstrType.ImmediateDoubleReg:
                    return "ImmediateDoubleRegisterInstruction";
                case InstrType.SingleLabel:
                    return "SingleLabelInstruction";
                case InstrType.DoubleLabel:
                    return "DoubleLabelInstruction";
                default:
                    throw new NotSupportedException();
            }
        }
    }

    public bool IsSetCC
    {
        get
        {
            return ((Flags & InstrFlags.SetCC) != 0);
        }
    }

    public static InstrInfo[] GetAll()
    {
        return new[]
            {
                new InstrInfo(InstrType.TripleReg, "add"),
                new InstrInfo(InstrType.ImmediateDoubleReg, "addi"),
                new InstrInfo(InstrType.TripleReg, "div"),
                new InstrInfo(InstrType.TripleReg, "mult"),
                new InstrInfo(InstrType.TripleReg, "sub"),
                new InstrInfo(InstrType.ImmediateDoubleReg, "rsubi"),
                new InstrInfo(InstrType.TripleReg, "and"),
                new InstrInfo(InstrType.TripleReg, "or"),
                new InstrInfo(InstrType.ImmediateDoubleReg, "xori"),
                new InstrInfo(InstrType.ImmediateSingleReg, "loadi"),
                new InstrInfo(InstrType.SingleReg, "print"),
                new InstrInfo(InstrType.SingleReg, "read"),
                new InstrInfo(InstrType.DoubleReg, "comp", InstrFlags.SetCC),
                new InstrInfo(InstrType.DoubleReg, "mov"),
                new InstrInfo(InstrType.ImmediateSingleReg, "moveq", InstrFlags.UseCC),
                new InstrInfo(InstrType.ImmediateSingleReg, "movge", InstrFlags.UseCC),
                new InstrInfo(InstrType.ImmediateSingleReg, "movgt", InstrFlags.UseCC),
                new InstrInfo(InstrType.ImmediateSingleReg, "movle", InstrFlags.UseCC),
                new InstrInfo(InstrType.ImmediateSingleReg, "movlt", InstrFlags.UseCC),
                new InstrInfo(InstrType.ImmediateSingleReg, "movne", InstrFlags.UseCC),
                new InstrInfo(InstrType.SingleLabel, "jumpi"),
                new InstrInfo(InstrType.DoubleLabel, "cbreq", InstrFlags.UseCC)
            };
    }
}
#>